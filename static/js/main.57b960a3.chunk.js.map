{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["rowStyle","display","justifyContent","width","balanced","name","code","currentAmount","targetPercent","Transaction","fund","target","difference","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","App","useState","funds","setFunds","amountToPurchase","setAmountToPurchase","currentTotal","reduce","previous","current","totalPercent","validTotalPercent","newTotal","transactions","map","sellTransactions","filter","transaction","totalSell","prev","curr","buyTransactions","newDenominator","buyTransactionsMinimizingSales","percentMultiplier","style","flexDirection","alignItems","index","type","onChange","e","newFunds","parseFloat","value","defaultValue","parseInt","color","key","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.57b960a3.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\ninterface IFund {\n  name: string;\n  code: string;\n  currentAmount: number;\n  targetPercent: number;\n}\n\ninterface ITransaction {\n  fund: IFund;\n  target: number;\n  difference: number;\n}\n\nconst rowStyle: React.CSSProperties = {\n  display: 'flex',\n  justifyContent: 'space-between',\n  width: '350px',\n};\n\nconst balanced = [\n  { name: 'Canadian Index', code: 'TDB900', currentAmount: 0, targetPercent: 25 },\n  { name: 'USA Index', code: 'TDB902', currentAmount: 0, targetPercent: 25 },\n  { name: 'Canadian Bonds', code: 'TDB909', currentAmount: 0, targetPercent: 25 },\n  { name: 'International Index', code: 'TDB911', currentAmount: 0, targetPercent: 25 },\n];\n\nfunction App() {\n  const [funds, setFunds] = useState<IFund[]>(balanced);\n  const [amountToPurchase, setAmountToPurchase] = useState(0);\n\n  const currentTotal = funds.reduce((previous, current) => previous + current.currentAmount, 0);\n  const totalPercent = funds.reduce((previous, current) => previous + current.targetPercent, 0);\n  const validTotalPercent = totalPercent === 100;\n  const newTotal = currentTotal + amountToPurchase;\n\n  const transactions: ITransaction[] = funds.map((fund) => {\n    const { currentAmount, targetPercent } = fund;\n    const percentMultiplier = targetPercent / 100;\n    const target = percentMultiplier * newTotal;\n    const difference = target - currentAmount;\n    return { fund, target, difference };\n  });\n\n  const sellTransactions = transactions.filter((transaction) => transaction.difference < 0);\n  const totalSell = sellTransactions.reduce((prev, curr) => prev + curr.difference, 0);\n  const buyTransactions = transactions.filter((transaction) => transaction.difference > 0);\n  const newDenominator = buyTransactions.reduce((prev, curr) => prev + curr.fund.targetPercent, 0);\n  const buyTransactionsMinimizingSales: ITransaction[] = buyTransactions.map((transaction) => {\n    // note this is not guaranteed to remove all sells\n    const percentMultiplier = transaction.fund.targetPercent / newDenominator;\n    const difference = transaction.difference + totalSell * percentMultiplier;\n    const target = transaction.fund.currentAmount + difference;\n    return { ...transaction, target, difference };\n  });\n\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n      <h1>Portfolio Balancer</h1>\n\n      <h3>Current market values</h3>\n      {funds.map((fund, index) => (\n        <div style={rowStyle} key={index}>\n          <label>\n            $ {fund.name} ({fund.code}):\n          </label>\n          <input\n            type=\"number\"\n            onChange={(e) => {\n              const newFunds = [...funds];\n              newFunds[index].currentAmount = parseFloat(e.target.value) || 0;\n              setFunds(newFunds);\n            }}\n          />\n        </div>\n      ))}\n      <div style={rowStyle}>\n        <label>Total:</label>\n        <span>${currentTotal.toLocaleString()}</span>\n      </div>\n\n      <h3>Amount to buy</h3>\n      <div style={rowStyle}>\n        <label>Amount in CAD</label>\n        <input\n          type=\"number\"\n          onChange={(e) => setAmountToPurchase(parseFloat(e.target.value) || 0)}\n        />\n      </div>\n      <div style={rowStyle}>\n        <label>New total:</label>\n        <span>${newTotal.toLocaleString()}</span>\n      </div>\n\n      <h3>Desired breakdown</h3>\n      {funds.map((fund, index) => (\n        <div style={rowStyle} key={index}>\n          <label>\n            % {fund.name} ({fund.code}):\n          </label>\n          <input\n            type=\"number\"\n            defaultValue={fund.targetPercent}\n            onChange={(e) => {\n              const newFunds = [...funds];\n              newFunds[index].targetPercent = parseInt(e.target.value) || 0;\n              setFunds(newFunds);\n            }}\n          />\n        </div>\n      ))}\n      <div style={rowStyle}>\n        <label>Total:</label>\n        <span style={{ color: validTotalPercent ? undefined : 'red' }}>{totalPercent}%</span>\n      </div>\n\n      {validTotalPercent ? (\n        <>\n          <h3>Therefore...</h3>\n          <ul>\n            {transactions.map((transaction) => (\n              <Transaction {...transaction} key={transaction.fund.code} />\n            ))}\n          </ul>\n          {sellTransactions.length ? (\n            <>\n              <h3>To minimize selling...</h3>\n              <ul>\n                {buyTransactionsMinimizingSales.map((transaction) => (\n                  <Transaction {...transaction} key={transaction.fund.code} />\n                ))}\n              </ul>\n            </>\n          ) : null}\n        </>\n      ) : null}\n    </div>\n  );\n}\n\nconst Transaction: React.FC<ITransaction> = ({ fund, target, difference }) => (\n  <li>\n    {difference >= 0 ? (\n      <>\n        Buy $\n        {difference.toLocaleString(undefined, {\n          minimumFractionDigits: 2,\n          maximumFractionDigits: 2,\n        })}\n      </>\n    ) : (\n      <>\n        Sell $\n        {(-difference).toLocaleString(undefined, {\n          minimumFractionDigits: 2,\n          maximumFractionDigits: 2,\n        })}\n      </>\n    )}{' '}\n    of {fund.name} ({fund.code}) to hit $\n    {target.toLocaleString(undefined, {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    })}\n  </li>\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}