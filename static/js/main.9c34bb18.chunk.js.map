{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","name","code","currentAmount","targetPercent","funds","setFunds","amountToPurchase","setAmountToPurchase","currentTotal","reduce","previous","current","parseFloat","totalPercent","parseInt","validTotalPercent","newTotal","style","display","flexDirection","alignItems","map","fund","index","justifyContent","width","type","value","onChange","e","newFunds","target","toLocaleString","color","undefined","currentAmountFloat","difference","minimumFractionDigits","maximumFractionDigits","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9c34bb18.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\ninterface Fund {\n  name: string;\n  code: string;\n  currentAmount: string;\n  targetPercent: string;\n}\n\nfunction App() {\n  const [funds, setFunds] = useState<Fund[]>([\n    { name: 'Canadian Index', code: 'TDB900', currentAmount: '', targetPercent: '25' },\n    { name: 'USA Index', code: 'TDB902', currentAmount: '', targetPercent: '25' },\n    { name: 'Canadian Bonds', code: 'TDB909', currentAmount: '', targetPercent: '25' },\n    { name: 'International Index', code: 'TDB911', currentAmount: '', targetPercent: '25' },\n  ]);\n  const [amountToPurchase, setAmountToPurchase] = useState('');\n\n  const currentTotal = funds.reduce(\n    (previous, current) => previous + (parseFloat(current.currentAmount) || 0),\n    0,\n  );\n  const totalPercent = funds.reduce(\n    (previous, current) => previous + (parseInt(current.targetPercent) || 0),\n    0,\n  );\n  const validTotalPercent = totalPercent === 100;\n\n  const amountToPurchaseNum = parseFloat(amountToPurchase) || 0;\n  const newTotal = currentTotal + amountToPurchaseNum;\n\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n      <h1>Portfolio Balancer</h1>\n\n      <h3>Current market values</h3>\n      {funds.map((fund, index) => (\n        <div style={{ display: 'flex', justifyContent: 'space-between', width: '300px' }}>\n          <label>\n            $ {fund.name} ({fund.code}):\n          </label>\n          <input\n            type=\"number\"\n            value={fund.currentAmount}\n            onChange={(e) => {\n              const newFunds = [...funds];\n              newFunds[index].currentAmount = e.target.value;\n              setFunds(newFunds);\n            }}\n          />\n        </div>\n      ))}\n      <div style={{ display: 'flex', justifyContent: 'space-between', width: '300px' }}>\n        <label>Total:</label>\n        <span>${currentTotal.toLocaleString()}</span>\n      </div>\n\n      <h3>Amount to buy</h3>\n      <div style={{ display: 'flex', justifyContent: 'space-between', width: '300px' }}>\n        <label>Amount in CAD</label>\n        <input\n          type=\"number\"\n          value={amountToPurchase}\n          onChange={(e) => setAmountToPurchase(e.target.value)}\n        />\n      </div>\n      <div style={{ display: 'flex', justifyContent: 'space-between', width: '300px' }}>\n        <label>New total:</label>\n        <span>${newTotal.toLocaleString()}</span>\n      </div>\n\n      <h3>Desired breakdown</h3>\n      {funds.map((fund, index) => (\n        <div style={{ display: 'flex', justifyContent: 'space-between', width: '300px' }}>\n          <label>\n            % {fund.name} ({fund.code}):\n          </label>\n          <input\n            type=\"number\"\n            value={fund.targetPercent}\n            onChange={(e) => {\n              const newFunds = [...funds];\n              newFunds[index].targetPercent = e.target.value;\n              setFunds(newFunds);\n            }}\n          />\n        </div>\n      ))}\n      <div style={{ display: 'flex', justifyContent: 'space-between', width: '300px' }}>\n        <label>Total:</label>\n        <span style={{ color: validTotalPercent ? undefined : 'red' }}>{totalPercent}%</span>\n      </div>\n\n      {validTotalPercent ? (\n        <>\n          <h3>Therefore...</h3>\n          <ul>\n            {funds.map((fund) => {\n              const { currentAmount, targetPercent } = fund;\n              const currentAmountFloat = parseFloat(currentAmount) || 0;\n              const percentMultiplier = (parseInt(targetPercent) || 0) / 100;\n              const target = percentMultiplier * newTotal;\n              const difference = target - currentAmountFloat;\n              return (\n                <li>\n                  {difference >= 0 ? (\n                    <>\n                      Buy $\n                      {difference.toLocaleString(undefined, {\n                        minimumFractionDigits: 2,\n                        maximumFractionDigits: 2,\n                      })}\n                    </>\n                  ) : (\n                    <>\n                      Sell $\n                      {(-difference).toLocaleString(undefined, {\n                        minimumFractionDigits: 2,\n                        maximumFractionDigits: 2,\n                      })}\n                    </>\n                  )}{' '}\n                  of {fund.name} ({fund.code}) to hit $\n                  {target.toLocaleString(undefined, {\n                    minimumFractionDigits: 2,\n                    maximumFractionDigits: 2,\n                  })}\n                </li>\n              );\n            })}\n          </ul>\n        </>\n      ) : null}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}