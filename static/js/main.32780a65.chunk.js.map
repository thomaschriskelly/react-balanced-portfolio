{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["FundCode","rowStyle","display","justifyContent","width","balanced","name","code","TDB900","targetPercent","TDB902","TDB909","TDB911","registered","taxable","Transaction","fund","target","difference","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","App","useState","funds","setFunds","holdings","setHoldings","amountToPurchase","setAmountToPurchase","currentTotal","Object","values","reduce","previous","current","totalPercent","validTotalPercent","newTotal","transactions","map","currentAmount","sellTransactions","filter","transaction","totalSell","prev","curr","buyTransactions","newDenominator","buyTransactionsMinimizingSales","percentMultiplier","style","flexDirection","alignItems","index","type","onChange","e","newFunds","parseFloat","value","JSON","parse","stringify","parseInt","color","onClick","key","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.32780a65.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nenum FundCode {\n  TDB900 = 'TDB900',\n  TDB902 = 'TDB902',\n  TDB909 = 'TDB909',\n  TDB911 = 'TDB911',\n}\n\ninterface IFund {\n  name: string;\n  code: FundCode;\n  targetPercent: number;\n}\n\ntype Holdings = { [code in FundCode]: number };\n\ninterface ITransaction {\n  fund: IFund;\n  target: number;\n  difference: number;\n}\n\nconst rowStyle: React.CSSProperties = {\n  display: 'flex',\n  justifyContent: 'space-between',\n  width: '350px',\n};\n\nconst balanced: IFund[] = [\n  { name: 'Canadian Index', code: FundCode.TDB900, targetPercent: 25 },\n  { name: 'USA Index', code: FundCode.TDB902, targetPercent: 25 },\n  { name: 'Canadian Bonds', code: FundCode.TDB909, targetPercent: 25 },\n  { name: 'International Index', code: FundCode.TDB911, targetPercent: 25 },\n];\n\nconst registered: IFund[] = [\n  { name: 'Canadian Index', code: FundCode.TDB900, targetPercent: 10 },\n  { name: 'USA Index', code: FundCode.TDB902, targetPercent: 30 },\n  { name: 'Canadian Bonds', code: FundCode.TDB909, targetPercent: 30 },\n  { name: 'International Index', code: FundCode.TDB911, targetPercent: 30 },\n];\n\nconst taxable: IFund[] = [\n  { name: 'Canadian Index', code: FundCode.TDB900, targetPercent: 40 },\n  { name: 'USA Index', code: FundCode.TDB902, targetPercent: 30 },\n  { name: 'Canadian Bonds', code: FundCode.TDB909, targetPercent: 0 },\n  { name: 'International Index', code: FundCode.TDB911, targetPercent: 30 },\n];\n\nfunction App() {\n  const [funds, setFunds] = useState<IFund[]>(balanced);\n  const [holdings, setHoldings] = useState<Holdings>(() => ({\n    TDB900: 0,\n    TDB902: 0,\n    TDB909: 0,\n    TDB911: 0,\n  }));\n  const [amountToPurchase, setAmountToPurchase] = useState(0);\n\n  const currentTotal = Object.values(holdings).reduce((previous, current) => previous + current, 0);\n  const totalPercent = funds.reduce((previous, current) => previous + current.targetPercent, 0);\n  const validTotalPercent = totalPercent === 100;\n  const newTotal = currentTotal + amountToPurchase;\n\n  const transactions: ITransaction[] = funds.map((fund) => {\n    const { targetPercent } = fund;\n    const currentAmount = holdings[fund.code];\n    const percentMultiplier = targetPercent / 100;\n    const target = percentMultiplier * newTotal;\n    const difference = target - currentAmount;\n    return { fund, target, difference };\n  });\n\n  const sellTransactions = transactions.filter((transaction) => transaction.difference < 0);\n  const totalSell = sellTransactions.reduce((prev, curr) => prev + curr.difference, 0);\n  const buyTransactions = transactions.filter((transaction) => transaction.difference > 0);\n  const newDenominator = buyTransactions.reduce((prev, curr) => prev + curr.fund.targetPercent, 0);\n  const buyTransactionsMinimizingSales: ITransaction[] = buyTransactions.map((transaction) => {\n    // note this is not guaranteed to remove all sells\n    const percentMultiplier = transaction.fund.targetPercent / newDenominator;\n    const difference = transaction.difference + totalSell * percentMultiplier;\n    const currentAmount = holdings[transaction.fund.code];\n    const target = currentAmount + difference;\n    return { ...transaction, target, difference };\n  });\n\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n      <h1>Portfolio Balancer</h1>\n\n      <h3>Current market values</h3>\n      {funds.map((fund, index) => (\n        <div style={rowStyle} key={index}>\n          <label>\n            $ {fund.name} ({fund.code}):\n          </label>\n          <input\n            type=\"number\"\n            onChange={(e) => {\n              const newFunds = [...funds];\n              holdings[fund.code] = parseFloat(e.target.value) || 0;\n              setHoldings(holdings);\n              setFunds(newFunds);\n            }}\n          />\n        </div>\n      ))}\n      <div style={rowStyle}>\n        <label>Total:</label>\n        <span>${currentTotal.toLocaleString()}</span>\n      </div>\n\n      <h3>Amount to buy</h3>\n      <div style={rowStyle}>\n        <label>Amount in CAD</label>\n        <input\n          type=\"number\"\n          onChange={(e) => setAmountToPurchase(parseFloat(e.target.value) || 0)}\n        />\n      </div>\n      <div style={rowStyle}>\n        <label>New total:</label>\n        <span>${newTotal.toLocaleString()}</span>\n      </div>\n\n      <h3>Desired breakdown</h3>\n      {funds.map((fund, index) => (\n        <div style={rowStyle} key={index}>\n          <label>\n            % {fund.name} ({fund.code}):\n          </label>\n          <input\n            type=\"number\"\n            value={fund.targetPercent}\n            onChange={(e) => {\n              const newFunds: IFund[] = JSON.parse(JSON.stringify(funds));\n              newFunds[index].targetPercent = parseInt(e.target.value) || 0;\n              setFunds(newFunds);\n            }}\n          />\n        </div>\n      ))}\n      <div style={rowStyle}>\n        <label>Total:</label>\n        <span style={{ color: validTotalPercent ? undefined : 'red' }}>{totalPercent}%</span>\n      </div>\n      <div style={rowStyle}>\n        <button onClick={() => setFunds(balanced)}>Balanced</button>\n        <button onClick={() => setFunds(registered)}>Registered</button>\n        <button onClick={() => setFunds(taxable)}>Taxable</button>\n      </div>\n\n      {validTotalPercent ? (\n        <>\n          <h3>Therefore...</h3>\n          <ul>\n            {transactions.map((transaction) => (\n              <Transaction {...transaction} key={transaction.fund.code} />\n            ))}\n          </ul>\n          {sellTransactions.length ? (\n            <>\n              <h3>To minimize selling...</h3>\n              <ul>\n                {buyTransactionsMinimizingSales.map((transaction) => (\n                  <Transaction {...transaction} key={transaction.fund.code} />\n                ))}\n              </ul>\n            </>\n          ) : null}\n        </>\n      ) : null}\n    </div>\n  );\n}\n\nconst Transaction: React.FC<ITransaction> = ({ fund, target, difference }) => (\n  <li>\n    {difference >= 0 ? (\n      <>\n        Buy $\n        {difference.toLocaleString(undefined, {\n          minimumFractionDigits: 2,\n          maximumFractionDigits: 2,\n        })}\n      </>\n    ) : (\n      <>\n        Sell $\n        {(-difference).toLocaleString(undefined, {\n          minimumFractionDigits: 2,\n          maximumFractionDigits: 2,\n        })}\n      </>\n    )}{' '}\n    of {fund.name} ({fund.code}) to hit $\n    {target.toLocaleString(undefined, {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    })}\n  </li>\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}